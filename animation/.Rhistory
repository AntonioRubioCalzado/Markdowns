oopt <- ani.options(interval = 0.2, nmax = 5)
for (i in 1:ani.options("nmax")) {
plot(dnorm(xs,0,1/i), type="l")
ani.pause()
}
ani.options(oopt)
}, cmd.fun=system,
movie.name="images/dnorm_animation.gif")
saveGIF({
xs <- seq(-2,2,len=100)
oopt <- ani.options(interval = 0.2, nmax = 5)
for (i in 1:ani.options("nmax")) {
plot(dnorm(xs,0,1/i), type="l")
ani.pause()
}
ani.options(oopt)
}, cmd.fun=system,
movie.name="dnorm_animation.gif")
oopt = ani.options(nmax = ifelse(interactive(), 500, 2), interval = 0.05, autobrowse = FALSE)
saveGIF({
xs <- seq(-2,2,len=100)
oopt <- ani.options(interval = 0.2, nmax = 5, autobrowse = FALSE)
for (i in 1:ani.options("nmax")) {
plot(dnorm(xs,0,1/i), type="l")
ani.pause()
}
ani.options(oopt)
}, cmd.fun=system,
movie.name="dnorm_animation.gif")
??interactive
buffon.needle()
oopt = ani.options(nmax = ifelse(interactive(), 500, 2), interval = 0.05)
par(mar = c(3, 2.5, 0.5, 0.2), pch = 20, mgp = c(1.5, 0.5, 0))
buffon.needle()
saveHTML({
par(mar = c(3, 2.5, 1, 0.2), pch = 20, mgp = c(1.5, 0.5, 0))
ani.options(nmax = ifelse(interactive(), 300, 10), interval = 0.1)
buffon.needle(type = "S", redraw = FALSE)
},
img.name = "buffon.needle",
htmlfile = "buffon.needle.html",
ani.height = 500,
ani.width = 600,
title = "Simulation of Buffon's Needle",
description = c("There are three graphs made in each step: the",
"top-left, one is a simulation of the scenario, the top-right one",
"is to help us understand the connection between dropping needles",
"and the mathematical method to estimate pi, and the bottom one is",
"the result for each dropping.")
)
par(mar = c(4, 4, 2, 0.1))
grad.desc()
im.convert(files="images/buffon.needle*.png",
output="images/buffon.needle.gif",
cmd.fun=system)
saveGIF({
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x*y^3
grad.desc(f, rg=(-2,-2,2,2), init=(-1.9,-1.9), gamma=0.1, tol=0.05)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) { x^2 - x*y^3 }
grad.desc(f, rg=(-2,-2,2,2), init=(-1.9,-1.9), gamma=0.1, tol=0.05)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) { x^2 - x*y^3 }
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x*y^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.2, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x*y^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.2, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x*y^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.2, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
#f <- function(x, y) x^2 - x*y^3
grad.desc( rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - y^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - y^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x*y^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - x^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x, y) x^2 - sin(y)*x^3
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
deriv(f)
deriv(f, namevec=c("x","y"))
deriv("^2 - sin(y)*x^3 ", namevec=c("x","y"))
deriv(expression(x^2 - sin(y)*x^3), namevec=c("x","y"))
grad.desc
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- sin(1/2 * x^2 - 1/4 * y^2 + 3) * cos(2 * x + 1 - exp(y))
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * cos(2 * x + 1 - exp(y))
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * (2 * x + 1 - exp(y))
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * (2 * x + 1 - exp(y))
grad.desc(f, rg=c(-2,-2,2,2), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * (2 * x + 1 - exp(y))
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * (2 * x)
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) (0.5 * x^2 - 1/4 * y^2 + 3) * (2 * x)
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 1*(0.5 * x^2 - 1/4 * y^2 + 3) * (2 * x)
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 - 1/4 * y^2 + 3
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 - 1/4 * y^0.5 + 3
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 50, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 - 1/4 * y + 3
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 150, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 - 1/4 * y + 3
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.05)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 150, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 - 1/4 * y + 3
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.01)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 150, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 - 2 * y^2
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.01)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 150, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 + 2 * y^2
grad.desc(f, rg=c(-5,-5,5,5), init=c(-1.9,-1.9), gamma=0.1, tol=0.01)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
saveGIF({
oopt <- ani.options(interval = 0.5, nmax = 150, autobrowse = FALSE)
par(mar = c(4, 4, 2, 0.1))
f <- function(x,y) 0.5 * x^2 + 2 * y^2
grad.desc(f, rg=c(-5,-5,5,5), init=c(-4.9,-4.9), gamma=0.1, tol=0.01)
ani.options(oopt)
}, cmd.fun=system,
movie.name="grad_animation.gif")
a <- 10
b <- 2
f <- function (a,b) a/b
do.call("f", args=list(a+1, b))
do.call("f", args=list(b=a, a=b))
env <- new.env()
e$a <- 2
env$a <- 2
assign("b", 8, envir = env)
assign("f", function(a,b) a+b, envir = env)
as.list(env)
do.call("f", args=list(quote(a), quote(b)), envir=env)
env$f <- function(a,b) a^b
do.call("f", args=list(quote(a), quote(b)), envir=env)
eval(c, list(c=1))
eval(c)
a <- 25
b <- call("sqrt", a)
b
eval(b)
a <- 16               # does not influence the previous environment
eval(b)
is.call(b)
is.call(call)         # functions are not calls
c <- call("^", 2, 4)  # call can receive multiple arguments
eval(c)
eval(c, list(c=1))
eval(c, env=list(c=1))
list(c=1)
eval(quote(c), env=list(c=1))
a <- 25
b <- call("sqrt", quote(a))
eval(b)
a <- 16               # now it influences, since R still not evaluated the parameter
eval(b)
eval(quote(b), env=list(b=1))
substitute(a+b, list(a=1))
a <- substitute(a+b+c, list(a=1,c=5))
a
eval(a, list(b=10))
??subset
8:1
df <- data.frame(x=1:8, y=8:1)
df
df <- data.frame(x=11:18, y=18:11)
df
subset(df, x>y)
df
subset(df, x>y)
subset2(df, x>y)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x)
x[r, ]
}
subset2(df, x>y)
my.subset(df, x>a)
a <- 15
my.subset(df, x>a)
subset2(df, x>a)
subset
subset2(df, x==a)
my.subset <- function(x, condition) {
condition_call <- substitute(condition)
rows <- eval(condition_call, env=x, enclos=parent.frame()) # parent.frame is the var scope the user needs
x[rows, ]
}
my.subset(df, x>y)
a <- 15
my.subset(df, x>a)
library(rSymPy)
install.packages("rSymPy")
library(rSymPy)
x <- Var("x")
x+x
sympy("solve(x**2 - 2, x)")
sympy("integrate(exp(-x), (x, 0, oo))")
library(rSymPy)
x <- Var("x")
x+x
x*x/x
y <- Var("x**3")
x/y
z <- sympy("2.5*x**2")
z + y
sympy("sqrt(8).evalf()")  # evaluate an expression
sympy("sqrt(8).evalf(50)")
sympy("pi.evalf(120)")
sympy("one = cos(1)**2 + sin(1)**2")
sympy("(one - 1).evalf()")  # rounding errors
sympy("(one - 1).evalf(chop=True)")  # rouding this type of roundoff errors
sympy("Eq(x**2+2*x+1,(x+1)**2)") # create an equation
sympy("a = x**2+2*x+1")
sympy("b = (x+1)**2")
"0" == sympy("simplify(a-b)")  # if they are equal, the result is zero
# simplify works in other tasks:
sympy("simplify((x**3 + x**2 - x - 1)/(x**2 + 2*x + 1))")
sympy("(x + 2)*(x - 3)")
sympy("expand((x + 2)*(x - 3))")
sympy("factor(x**3 - x**2 + x - 1)")
Var("z")
sympy("collect(x*y + x - 3 + 2*x**2 - z*x**2 + x**3, x)")
Var("y")
Var("z")
sympy("collect(x*y + x - 3 + 2*x**2 - z*x**2 + x**3, x)")
sympy("expand((x + 2)*(x - 3))")
sympy("factor(x**3 - x**2 + x - 1)")
sympy("(x*y**2 - 2*x*y*z + x*z**2 + y**2 - 2*y*z + z**2)/(x**2 - 1)")
sympy("collect(x*y + x - 3 + 2*x**2 - z*x**2 + x**3, x)")
sympy("cancel((x*y**2 - 2*x*y*z + x*z**2 + y**2 - 2*y*z + z**2)/(x**2 - 1))")
sympy("(x*y**2 - 2*x*y*z + x*z**2 + y**2 - 2*y*z + z**2)/(x**2 - 1)")
sympy("expand_func(gamma(x + 3))")
sympy("y = x*x") # create a variable 'y' in the SymPy persistant state
sympy("A = Matrix([[1,x], [y,1]])")
sympy("A**2")
sympy("B = A.subs(x,1.1)")  # replace x by 1.1 (btw, SymPy objects are immutable)
sympy("B**2")
sympy("expr = sin(2*x) + cos(2*x)")
sympy("expr.subs(sin(2*x), 2*sin(x)*cos(x))")
sympy("expr.subs(x,pi/2)")
a1 <- Var("a1")
a2 <- Var("a2")
a3 <- Var("a3")
a4 <- Var("a4")
A <- Matrix(List(a1, a2), List(a3, a4))
Inv <- function(x) Sym("(", x, ").inv()")
Det <- function(x) Sym("(", x, ").det()")
A
cat(A,"\n")
Inv(A)
Det(A)
Exp <- function(x) Sym("exp(", x, ")")
Exp(-x) * Exp(x)
sympy("sqrt(8)")             # simplify expression
sympy("solve(x**2 - 2, x)")  # solve x^2-2=0
sympy("limit(1/x, x, oo)")   # limit eg, x -> Inf
sympy("limit(1/x, x, 0)")
sympy("integrate(exp(-x*y),x)")              # indefinite integral
sympy("integrate(exp(-x), (x, 0, oo))")  # definite integral
sympy("integrate(x**2 - y, (x, -5, 5), (y, -pi, pi))")  # definite integral
y <- Var("y")
z <- Var("z")
sympy("integrate(x**2 - y, (x, -5, 5), (y, -pi, pi))")  # definite integral
integrate( function(x) exp(-x), 0, Inf)  # integration is possible in R
sympy("diff(sin(2*x), x, 1)")  # first derivative
sympy("integrate(exp(-x), (x, 0, oo))")  # definite integral
integrate( function(x) exp(-x), 0, Inf)  # integration is possible in R
D( expression(sin(2*x)), "x" ) # also possible in base R
sympy("diff(sin(2*x), x, 1)")  # first derivative
D( expression(sin(2*x)), "x" ) # also possible in base R
sympy("diff(sin(2*x), x, 2)") # second derivative
sympy("diff(sin(2*x), x, 3)") # third  derivative
sympy("diff(exp(x*y*z), x, y, y)") # d^3/dxdy^2
sympy("diff(exp(x*y*z), x, z, 3)") # d^4/dxdz^3
sympy("(1/cos(x)).series(x, 0, 10)")  # taylor expansion
sympy("exp(x).series(x, 0, 5)")       # taylor expansion
sympy("exp(x).series(x, 0, 5).removeO()")
sympy("Matrix([[1, 2], [2, 2]]).eigenvals()")  # get eigenvalues of matrix
sympy("latex(Integral(cos(x)**2, (x, 0, pi)))")
library(lubridate)
install.packages("lubridate")
install.packages("circular")
N <- 500
events <- as.POSIXct("2011-01-01", tz="GMT") +
days(floor(365*runif(N))) +
hours(floor(24*rnorm(N))) +  # using rnorm here
minutes(floor(60*runif(N))) +
seconds(floor(60*runif(N)))
library(lubridate)  # deal with date values
library(circular)   # for circular statistics
N <- 500
events <- as.POSIXct("2011-01-01", tz="GMT") +
days(floor(365*runif(N))) +
hours(floor(24*rnorm(N))) +  # using rnorm here
minutes(floor(60*runif(N))) +
seconds(floor(60*runif(N)))
head(events)
eventdata <- data.frame(datetime = events, eventhour = hour(events))
eventdata$Workday <- eventdata$eventhour %in% seq(9, 17) # determine if event is in business hours (9am to 17pm)
df <- data.frame(datetime = events, eventhour = hour(events))
df$work <- eventdata$eventhour %in% seq(9, 17) # determine if event is in business hours (9am to 17pm)
head(df)
dfa$eventhour <- circular(hour_of_event%%24, # convert to 24 hrs
units="hours",
template="clock24")
df <- data.frame(datetime = events, eventhour = hour(events))
df$work <- df$eventhour %in% seq(9, 17) # determine if event is in business hours (9am to 17pm)
head(df)
dfa$eventhour <- circular(hour_of_event%%24, # convert to 24 hrs
units="hours",
template="clock24")
dfa$eventhour <- circular(df$eventhour%%24, # convert to 24 hrs
units="hours",
template="clock24")
df$eventhour <- circular(df$eventhour%%24, # convert to 24 hrs
units="hours",
template="clock24")
head(df)
sapply(df,class)
rose.diag(eventdata$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (sqrt scale)", prop = 3)
rose.diag(eventdata$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (sqrt scale)", prop = 3)
rose.diag(eventdata$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (sqrt scale)", prop = 3)
rose.diag(eventdata$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (linear scale)",
prop = 12, radii.scale = "linear", shrink = 1.5, cex = 0.8)
rose.diag(df$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (sqrt scale)", prop = 3)
rose.diag(df$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (sqrt scale)", prop = 3)
rose.diag(df$eventhour, bin = 24, col = "lightblue", main = "Events by Hour (linear scale)",
prop = 12, radii.scale = "linear", shrink = 1.5, cex = 0.8)
d
sapply(df,class)
head(df)
df$eventhour
rose.diag(df$eventhour, bins = 24, col = "lightblue", main = "Events by Hour (sqrt scale)")
hist(df$eventhour)
df$eventhour
hist(df$eventhour)
hist(df$eventhour, breaks=10)
N <- 500
events <- as.POSIXct("2011-01-01", tz="GMT") +
days(floor(365*runif(N)))      +
hours(floor(24*rnorm(N)))      +
minutes(floor(60*runif(N))   ) +
seconds(floor(60*runif(N)))
head(events)
df <- data.frame(datetime = events, eventhour = hour(events))
df$work <- df$eventhour %in% seq(9, 17) # determine if event is in business hours (9am to 17pm)
head(df)
rose.diag(df$eventhour, bins = 24, col = "lightblue", main = "Events by Hour (sqrt scale)")
hist(df$eventhour)
