pdistC(2, c(1.1,2,10))
cppFunction('
double sumIt(NumericVector x) {
double total = 0;
NumericVector::iterator it;
for(it = x.begin(); it != x.end(); ++it) {
total += *it;
}
return total;
}
')
sumIt(c(1:100))
findInterval(c(11,51,14,22,31,6), c(0,10,20,30))
findInterval(c(11,-1,51,14,22,31,6), c(0,10,20,30))
cppFunction('
IntegerVector findIntervalCpp(NumericVector x, NumericVector breaks) {
IntegerVector out(x.size());
NumericVector::iterator it, pos;
IntegerVector::iterator out_it;
// step through two iterators (input x and output out) simultaneously
for(it = x.begin(), out_it = out.begin(); it != x.end(); ++it, ++out_it) {
pos = std::upper_bound(breaks.begin(), breaks.end(), *it); // upper_bound() returns an iterator
*out_it = std::distance(breaks.begin(), pos);
}
return out;
}
')
findIntervalCpp(x=c(11,-1,51,14,22,31,6), vec=c(0,10,20,30))
findIntervalCpp(c(11,-1,51,14,22,31,6), c(0,10,20,30))
install.packages("lineprof")
library(lineprof)
devtools::install_github("lineprof")
library(lineprof)
setwd("~/Documents/Dropbox/My Work/Projects/R/My_Markdowns/benchmarking")
code = "
f <- function() {
pause(0.1)
g()
h()
}
g <- function() {
pause(0.1)
h()
}
h <- function() {
pause(0.1)
}
"
write(code, "source.R")
source("source.R")
l <- lineprof(f())
l
library(shiny)
shine(l)
shine(l)
read_delim <- function(file, header = TRUE, sep = ",") {
# Determine number of fields by reading first line
first <- scan(file, what = character(1), nlines = 1,
sep = sep, quiet = TRUE)
p <- length(first)
# Load all fields as character vectors
all <- scan(file, what = as.list(rep("character", p)),
sep = sep, skip = if (header) 1 else 0, quiet = TRUE)
# Convert from strings to appropriate types (never to factors)
all[] <- lapply(all, type.convert, as.is = TRUE)
# Set column names
if (header) {
names(all) <- first
} else {
names(all) <- paste0("V", seq_along(all))
}
# Convert list into data frame
as.data.frame(all)
}
"
write(code, "source.R")
write(code, "source.R")
source("source.R")  # this is necessary for lineprof to work
l <- lineprof(f())
l
code = "
read_delim <- function(file, header = TRUE, sep = ",") {
# Determine number of fields by reading first line
first <- scan(file, what = character(1), nlines = 1,
sep = sep, quiet = TRUE)
p <- length(first)
# Load all fields as character vectors
all <- scan(file, what = as.list(rep("character", p)),
sep = sep, skip = if (header) 1 else 0, quiet = TRUE)
# Convert from strings to appropriate types (never to factors)
all[] <- lapply(all, type.convert, as.is = TRUE)
# Set column names
if (header) {
names(all) <- first
} else {
names(all) <- paste0("V", seq_along(all))
}
# Convert list into data frame
as.data.frame(all)
}
"
code = '
read_delim <- function(file, header = TRUE, sep = ",") {
# Determine number of fields by reading first line
first <- scan(file, what = character(1), nlines = 1,
sep = sep, quiet = TRUE)
p <- length(first)
# Load all fields as character vectors
all <- scan(file, what = as.list(rep("character", p)),
sep = sep, skip = if (header) 1 else 0, quiet = TRUE)
# Convert from strings to appropriate types (never to factors)
all[] <- lapply(all, type.convert, as.is = TRUE)
# Set column names
if (header) {
names(all) <- first
} else {
names(all) <- paste0("V", seq_along(all))
}
# Convert list into data frame
as.data.frame(all)
}
'
aerw
321
+
)=
""
```{r, eval=FALSE}
'
'aasd""'
code = '
read_delim <- function(file, header = TRUE, sep = ",") {
# Determine number of fields by reading first line
first <- scan(file, what = character(1), nlines = 1,
sep = sep, quiet = TRUE)
p <- length(first)
# Load all fields as character vectors
all <- scan(file, what = as.list(rep("character", p)),
sep = sep, skip = if (header) 1 else 0, quiet = TRUE)
# Convert from strings to appropriate types (never to factors)
all[] <- lapply(all, type.convert, as.is = TRUE)
# Set column names
if (header) {
names(all) <- first
} else {
names(all) <- paste0("V", seq_along(all))
}
# Convert list into data frame
as.data.frame(all)
}
'
write(code, "source.R")
source("source.R")  # this is necessary for lineprof to work
l <- lineprof(f())
l
library(ggplot2)
write.csv(diamonds, "diamonds.csv", row.names = FALSE)
l <- lineprof(read_delim("diamonds.csv"))
l
shine(l)
library(MASS)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]), Sp = rep(c("s","c","v"), rep(50,3)))
train <- sample(1:150, 75)
table(Iris$Sp[train])
head(Iris)
Iris$Sp
fit <- lda(Sp ~ ., data=Iris, prior = c(1,1,1)/3, subset = train)
fit # show results
pred <- predict(z, Iris[-train, ])$class
pred <- predict(fit, Iris[-train, ])$class
table(Iris[-train, ]$Sp, pred)
iris3
iris
table(iris[train])
table(iris$Species[train])
fit <- lda(Species ~ ., data=iris, prior = c(1,1,1)/3, subset = train)
fit # show results
pred <- predict(fit, iris[-train, ])$class
table(iris[-train, ]$species, pred)
table(iris[-train, ]$Species, pred)
cl <- factor(c(rep("setosa",25), rep("versicolor",25), rep("virginica",25)))
fit <- qda(train, cl)
fit <- qda(train, data=iris, subset=train, cl)
train.set <- iris[train,]
train.set
train.set <- iris[train,-5]
train.set
fit <- qda(train.set, cl)
predict(fit,test)$class
test.set  <- iris[-train,-5]
predict(fit,test.set)$class
pred <- predict(fit,test.set)$class
table(iris[-train, 5], pred)
as.factor(iris[trian,5])
as.factor(iris[train,5])
fit <- qda(train.set, as.factor(iris[train,5]))
pred <- predict(fit,test.set)$class
table(iris[-train, 5], pred)
train.set <- iris[train,]
fit <- qda(Species ~ ., data=train.set)
pred <- predict(fit,test.set)$class
table(iris[-train, 5], pred)
train.set <- iris[train,]
test.set  <- iris[-train,]
fit <- qda(Species ~ ., data=train.set)
pred <- predict(fit,test.set[,-5])$class
table(iris[-train, 5], pred)
train.set <- iris[train,]
test.set  <- iris[-train,]
fit <- lda(Species ~ ., data=train.set, prior = c(1,1,1)/3)
fit # show results
pred <- predict(fit, test.set)$class
table(test.set$Species, pred)
table(test.set$Species, pred)
fit <- qda(Species ~ ., data=train.set)
pred <- predict(fit,test.set[,-5])$class
table(test.set$Species, pred)
plot(fit)
fit <- lda(Species ~ ., data=train.set, prior = c(1,1,1)/3)
fit # show results
plot(fit)
plot(fit, col=train.set[,5])
train.set[,5]
levels(train.set[,5])
levels(train.set[,5])[levels(train.set)]
as.numeric(levels(train.set[,5]))[train.set[,5]]
train.set[,5]
levels(train.set[,5])
as.numeric(levels(train.set[,5]))
as.numeric(levels(train.set[,5]))
index(levels(train.set[,5]))
level(levels(train.set[,5]))
unclass(levels(train.set[,5]))
unclass(train.set[,5])
plot(fit, col=unclass(train.set[,5]))
pred <- predict(fit, test.set)$class
table(test.set$Species, pred)
fit <- qda(Species ~ ., data=train.set)
plot(fit, col=unclass(train.set[,5]))
fit
plot(fit, dimen=1)
fit <- lda(Species ~ ., data=train.set, prior = c(1,1,1)/3)
plot(fit, dimen=1)
plot(fit, dimen=1, type="both")
plot(fit, dimen=1)
install.packages("klaR")
library(klaR)
partimat(G~.,data=train.set,method="lda")
partimat(Species~.,data=train.set,method="lda")
fit <- qda(Species ~ ., data=train.set)
partimat(Species ~ ., data=train.set, method="qda")
pairs(train.set, main="My Title ", pch=22, bg=c("red", "yellow", "blue")[unclass(mydata$Species)])
pairs(train.set, main="My Title ", pch=22, bg=c("red", "yellow", "blue")[unclass(train.set$Species)])
pairs(iris, main="My Title ", pch=22, bg=c("red", "yellow", "blue")[unclass(iris$Species)])
plot(fit, col=unclass(train.set[,5]))
fit <- lda(Species ~ ., data=train.set, prior = c(1,1,1)/3)
fit
names(fit)
fit$counts
fit$means
fit$terms
fit$xlevels
eqscplot(aa.ld,type="n",xlab="LD1", ylab="LD2",tol=0.25, las=1)
eqscplot(fit,type="n",xlab="LD1", ylab="LD2",tol=0.25, las=1)
AA<-read.table("http://www.natursyn.dk/online/fingerprinting.txt",header=T)
pred
pred$x
eqscplot(predict(fit, test.set),type="n",xlab="LD1", ylab="LD2",tol=0.25, las=1)
eqscplot(pred,type="n",xlab="LD1", ylab="LD2",tol=0.25, las=1)
plot(fit, col=unclass(train.set[,5]))
plot(fit, dimen=1)
fit # show results
pred <- predict(fit, test.set)
pred
table(test.set$Species, pred$class)
cr.t <- pred$x[, 1:2] # choose the best two linear discriminants (in this eg there are just two)
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(crabs.grp))
crabs.grp
crabs
head(Crabs)
head(crabs)
head(crabs.grp)
text(cr.t, labels = as.character(crabs$sp)
)
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(crabs$sp))
cr.t
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(test.set$Species))
as.character(test.set$Species)
unclass(iris$Species)
text(cr.t, labels = as.character(unclass(iris$Species)), bg=c("red", "yellow", "blue")[unclass(iris$Species)])
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(unclass(iris$Species)), col=c("red", "yellow", "blue")[unclass(iris$Species)])
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(unclass(iris$Species)), col=c("red", "green", "blue")[unclass(iris$Species)])
text(cr.t, labels = as.character(unclass(test.set$Species)), col=c("red", "green", "blue")[unclass(test.set$Species)])
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(unclass(test.set$Species)), col=c("red", "green", "blue")[unclass(test.set$Species)])
perp <- function(x, y) {
m <- (x+y)/2
s <- - (x[1] - y[1])/(x[2] - y[2])
abline(c(m[2] - s*m[1], s))
invisible()
}
test.set
cr.m <- lda(cr.t, test.set$Sepal.Length)@means # in R use $means
cr.m <- lda(cr.t, test.set$Sepal.Length)$means # in R use $means
points(cr.m, pch = 3, mkh = 0.3)
perp(cr.m[1, ], cr.m[2, ])
cr.lda <- lda(test.set$Species)
cr.lda <- lda(cr.t, test.set$Species)
x <- seq(-6, 6, 0.25)
y <- seq(-2, 2, 0.25)
Xcon <- matrix(c(rep(x,length(y)), rep(y, each = length(x))),,2)
cr.pr <- predict(cr.lda, Xcon)$post[, c("B", "O")] %*% c(1,1)
cr.m <- lda(cr.t, test.set$Sepal.Width)$means # in R use $means
points(cr.m, pch = 3, mkh = 0.3)
perp(cr.m[1, ], cr.m[2, ])
cr.m
cr.t
cr.t <- pred$x[, 1:2] # choose the best two linear discriminants (in this eg there are just two)
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "Second LD")
text(cr.t, labels = as.character(unclass(test.set$Species)),
col=c("red", "green", "blue")[unclass(test.set$Species)])
cr.m <- lda(cr.t, test.set$Sepal.Length)$means
perp(cr.m[1, ], cr.m[2, ])
cr.m <- lda(cr.t, test.set$Sepal.Width)$means
perp(cr.m[1, ], cr.m[2, ])
head(iris)
cr.m <- lda(cr.t, test.set$Petal.Length)$means
perp(cr.m[1, ], cr.m[2, ])
model <- lda(Species ~ . , data=iris)
model$means
plot(iris$Sepal.width, iris$Sepal.Length, col=iris$Species)
iris$Sepal.width
iris[,"Sepal.width"]
iris[,"Sepal.Width"]
plot(iris[,"Sepal.Width"], iris$[,"Sepal.Length"], col=iris$Species)
plot(iris[,"Sepal.Width"], iris[,"Sepal.Length"], col=iris$Species)
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"], col=iris$Species, pch=19)
unclass(iris$Species)
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"], col=c("blue","green","red")[unclass(iris$Species)], pch=19)
model$means
model$means[,"Sepal.Length"]
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Length"], pch=10)
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"], pch=10)
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"], pch=3, lwd=2)
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"], col=c("blue","green","red")[unclass(iris$Species)], pch=19)
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"], pch=3, lwd=2)
perp <- function(x, y) {
m <- (x+y)/2
s <- - (x[1] - y[1])/(x[2] - y[2])
abline(c(m[2] - s*m[1], s))
invisible()
}
perp(cr.m[1, ], cr.m[2, ])
perp(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"])
perp(model$means[1,"Sepal.Length"], model$means[1,"Sepal.Width"])
model$means
perp(model$means[1,], model$means[2,])
model$means[2,]
perp(model$means[1,"Sepal.Length"], model$means[1,"Sepal.Width"])
model$means[1,"Sepal.Length"]
model$means[1,"Sepal.Width"]
model <- lda(Species ~ . , data=iris)
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"], col=c("blue","green","red")[unclass(iris$Species)], pch=19)
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"], pch=3, lwd=2)
perp(model$means[1,"Sepal.Length"], model$means[1,"Sepal.Width"])
model$means
model
model$svd
model$scaling
perp(model$means[1,"Sepal.Length"], model$means[1,"Sepal.Width"])
perp(model$means[2,"Sepal.Length"], model$means[2,"Sepal.Width"])
perp(model$means[3,"Sepal.Length"], model$means[3,"Sepal.Width"])
perp(model$means[1,], model$means[2,])
perp(model$means[1,], model$means[3,])
perp(model$means[2,], model$means[3,])
perp(model$means[1,1:2], model$means[2,1:2])
perp(model$means[1,1:2], model$means[3,1:2])
model <- lda(Species ~ . , data=iris)
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"], col=c("blue","green","red")[unclass(iris$Species)], pch=19)
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"], pch=3, lwd=2)
perp(model$means[1,1:2], model$means[2,1:2])
perp(model$means[1,1:2], model$means[3,1:2])
perp(model$means[2,1:2], model$means[3,1:2])
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"],
col=c("blue","green","red")[unclass(iris$Species)], pch=19,
xlab="Sepal Length", ylab="Sepal Width")
points(model$means[,"Sepal.Length"], model$means[,"Sepal.Width"], pch=3, lwd=2)
perp(model$means[1,1:2], model$means[2,1:2])
perp(model$means[1,1:2], model$means[3,1:2])
perp(model$means[2,1:2], model$means[3,1:2])
perp <- function(x, y, ...) {
m <- (x+y)/2
s <- - (x[1] - y[1])/(x[2] - y[2])
abline(c(m[2] - s*m[1], s),...)
invisible()
}
perp(model$means[1,1:2], model$means[2,1:2], col="red")
perp(model$means[1,1:2], model$means[3,1:2], col="blue")
perp(model$means[2,1:2], model$means[3,1:2], col="green")
partimat(x=iris[,-5], grouping=as.factor(my.data[,5]), method="lda",
col.mean=1, image.colors = c("lightgrey","red","green"))
partimat(x=iris[,-5], grouping=as.factor(iris[,5]), method="lda",
col.mean=1, image.colors = c("lightgrey","red","green"))
partimat(x=iris[1:2,-5], grouping=as.factor(iris[,5]), method="lda",
col.mean=1, image.colors = c("lightgrey","red","green"))
iris[1:2,-5]
partimat(x=iris[,1:2], grouping=as.factor(iris[,5]), method="lda",
col.mean=1, image.colors = c("lightgrey","red","green"))
partimat(x=iris[,2:1], grouping=as.factor(iris[,5]), method="lda",
col.mean=1, image.colors = c("lightgrey","red","green"))
means <- model$means
means
means
means <- model$means[,1:2]
means
plot(iris[,"Sepal.Length"], iris[,"Sepal.Width"],
col=c("blue","green","red")[unclass(iris$Species)], pch=19,
xlab="Sepal Length", ylab="Sepal Width")
points(means, pch=3, lwd=2)
iris[1,]
iris[,1]
means
means <- model$means
means
points(means[,1:2], pch=3, lwd=2)
(iris[,1]-means)
iris[,1]
iris-means
iris[,-5]-means
Sigma <- sum( (iris[,-5]-means) %*% t((iris[,-5]-means))  )
t(iris[,-5]-means)
(iris[,-5]-means) %*% t(iris[,-5]-means)
Sigma <- sum( as.matrix(iris[,-5]-means) %*% t(as.matrix(iris[,-5]-means))  )
Sigma
Sigma <- sum( t(as.matrix(iris[,-5]-means)) %*% as.matrix(iris[,-5]-means)  )
Sigma
as.matrix(iris[,-5]-means)
t(as.matrix(iris[,-5]-means))
means
Sigma <- as.matrix(iris[,-5]-means[1,]) %*% t(as.matrix(iris[,-5]-means[1,]))
Sigma
Sigma <-         as.matrix(iris[,-5]-means[1,]) %*% t(as.matrix(iris[,-5]-means[1,]))
Sigma <- Sigma + as.matrix(iris[,-5]-means[2,]) %*% t(as.matrix(iris[,-5]-means[2,]))
Sigma <- Sigma + as.matrix(iris[,-5]-means[3,]) %*% t(as.matrix(iris[,-5]-means[3,]))
Sigma(1:4,1:4)
Sigma[1:4,1:4]
Sigma.inv <- solve(Sigma)
es <- eigen(Sigma, symmetric=T)
Lambda <- diag(es$values)
Q <- es$vectors
Lambda
Q
S <- 1/sqrt(Lambda)
S
"%^%" <- function(A, n)
with(eigen(A), vectors %*% (values^n * solve(vectors)))
Lambda %^% (-0.5)
solve(Lambda)
es
Lambda[1:66,1:66]
Lambda[1:67,1:67]
Lambda[1:67,1:69]
Lambda[1:69,1:69]
diag(Lambda)
1/Lambda
Lambda
1/diag(Lambda)
1/sqrt(diag(Lambda))
1/(diag(Lambda^2))
1/(diag(Lambda)^2)
install.packages("R.matlab")
matlab <- Matlab(host="localhost")
Matlab$startServer()
library(R.matlab)
Matlab$startServer()
matlab <- Matlab(host="localhost")
system("dir")
system("dir",intern = T)
e <- system("date", intern=TRUE)
e
e <- system("dir", intern=TRUE)
??system
system2("dir")
system2("path")
system2("path", stdout=TRUE)
system2("dir", stdout=TRUE)
shell("dir")
res <- evaluate(matlab, "A=1+2;", "B=ones(2,20);")
matlab
Matlab$startServer()
matlab <- Matlab(host="localhost")
res <- evaluate(matlab, "A=1+2;", "B=ones(2,20);")
if (!open(matlab))
throw("Matlab server is not running: waited 30 seconds.")
!open(matlab)
open(matlab)
res <- evaluate(matlab, "A=1+2;", "B=ones(2,20);")
shell("matlab -nodesktop -nosplash")
Matlab$startServer()
matlab <- Matlab(host="localhost")
open(matlab)
shell("matlab -nodesktop -nosplash")
library(R.matlab)
Matlab$startServer()
# Create a Matlab client
matlab <- Matlab(host="localhost")
open(matlab)
